<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\Resurrection;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\GraveyardController
 */
class ResurrectionControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function destroy_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resurrection = Resurrection::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->delete(route('users.resurrections.destroy', ['user' => $user, 'resurrection' => $resurrection]));

        $response->assertRedirect(withSuccess('Resurrection Successfully Canceled!'));
        $this->assertModelMissing($resurrection);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resurrection = Resurrection::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('users.resurrections.store', ['user' => $user]), [
            'torrent_id' => $resurrection->torrent_id,
        ]);

        $response->assertRedirect(withErrors('Torrent Resurrection Failed! This torrent is already pending a resurrection.'));

        // TODO: perform additional assertions
    }

    // test cases...
}
